package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.74

import (
	"context"
	"fmt"
	"orders-service/graph/model"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	// Calculate total
	total := input.Price * float64(input.Quantity)
	
	// Create new order
	newOrder := &model.Order{
		ID:        fmt.Sprintf("%d", nextOrderID),
		UserID:    input.UserID,
		ProductID: input.ProductID,
		Quantity:  input.Quantity,
		Price:     input.Price,
		Total:     total,
		Status:    "pending", // New orders start as pending
		CreatedAt: "2024-06-14T15:45:00Z", // In real app, use time.Now()
	}

	// Add to order
	orders = append(orders, newOrder)
	nextOrderID++
	
	fmt.Printf("Created order %s for user %s\n", newOrder.ID, newOrder.UserID)
	return newOrder, nil
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id string, status string) (*model.Order, error) {
	// Find the order
	for _, order := range orders{
		if order.ID == id{
			// Update the status
			order.Status = status
			fmt.Printf("Update order %s status to %s\n", id, status)
			return order, nil
		}
	}
	return nil, fmt.Errorf("order with id %s not found", id)
}

// GetOrder is the resolver for the getOrder field.
func (r *queryResolver) GetOrder(ctx context.Context, id string) (*model.Order, error) {
	for _, order := range orders{
		if order.ID == id{
			fmt.Printf("Found order %s\n", id)
			return order, nil
		}
	}
	return nil, fmt.Errorf("order with id %s not found", id)
}

// GetAllOrders is the resolver for the getAllOrders field.
func (r *queryResolver) GetAllOrders(ctx context.Context) ([]*model.Order, error) {
	fmt.Printf("Returning %d orders\n", len(orders))
	return orders, nil
}

// GetOrdersByUser is the resolver for the getOrdersByUser field.
func (r *queryResolver) GetOrdersByUser(ctx context.Context, userID string) ([]*model.Order, error) {
	var userOrder []*model.Order
	for _, order := range orders{
		if order.UserID == userID{
			userOrder = append(userOrder, order)
		}
	}
	fmt.Printf("found %d orders for users %s\n", len(userOrder), userID)
	return userOrder, nil
}

// GetOrdersByProduct is the resolver for the getOrdersByProduct field.
func (r *queryResolver) GetOrdersByProduct(ctx context.Context, productID string) ([]*model.Order, error) {
	var productOrders []*model.Order
	for _, order := range orders{
		if order.ProductID == productID{
			productOrders = append(productOrders, order)
		
		}
	}
	return productOrders, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
