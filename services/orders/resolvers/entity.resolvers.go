package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"

	"github.com/tagaertner/e-commerce-graphql/services/orders/generated"
	"github.com/tagaertner/e-commerce-graphql/services/orders/models"
)

// FindOrderByID is the resolver for the findOrderByID field.
func (r *entityResolver) FindOrderByID(ctx context.Context, id string) (*generated.Order, error) {
	order, err := r.OrderService.GetOrderByID(id)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// FindProductByID is the resolver for the findProductByID field.
func (r *entityResolver) FindProductByID(ctx context.Context, id string) (*generated.Product, error) {
	panic(fmt.Errorf("not implemented: FindProductByID - findProductByID"))
}

// FindUserByID is the resolver for the findUserByID field.
func (r *entityResolver) FindUserByID(ctx context.Context, id string) (*models.User, error) {
	fmt.Printf("ðŸš¨ðŸš¨ðŸš¨ FindUserByID called for user ID: %s ðŸš¨ðŸš¨ðŸš¨\n", id)
	user := &models.User{ID: id}
	result := ToGraphQLUser(user)
	fmt.Printf("ðŸš¨ðŸš¨ðŸš¨ FindUserByID returning user: %+v ðŸš¨ðŸš¨ðŸš¨\n", result)
	return result, nil
}

// Entity returns generated.EntityResolver implementation.
func (r *Resolver) Entity() generated.EntityResolver { return &entityResolver{r} }

type entityResolver struct{ *Resolver }
