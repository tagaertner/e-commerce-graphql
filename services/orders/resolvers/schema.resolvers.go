package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/tagaertner/e-commerce-graphql/services/orders/generated"
	"github.com/tagaertner/e-commerce-graphql/services/orders/models"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input models.CreateOrderInput) (*generated.Order, error) {
	createdAt := time.Time(input.CreatedAt)
	order, err := r.OrderService.CreateOrder(
		ctx,
		input.UserID,
		input.ProductIDs,
		input.Quantity,
		input.TotalPrice,
		input.Status,
		createdAt,
	)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// UpdateOrder is the resolver for the updateOrder field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, input models.UpdateOrderInput) (*generated.Order, error) {
	order, err := r.OrderService.UpdateOrder(ctx, &input)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, input models.DeleteOrderInput) (bool, error) {
	return r.OrderService.DeleteOrder(ctx, input)
}

// SetOrderStatus is the resolver for the setOrderStatus field.
func (r *mutationResolver) SetOrderStatus(ctx context.Context, input models.SetOrderStatusInput) (*generated.Order, error) {
	order, err := r.OrderService.SetOrderStatus(ctx, input)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// ChangeOrderQuantity is the resolver for the changeOrderQuantity field.
func (r *mutationResolver) ChangeOrderQuantity(ctx context.Context, input models.ChangeOrderQuantityInput) (*generated.Order, error) {
	panic(fmt.Errorf("not implemented: ChangeOrderQuantity - changeOrderQuantity"))
}

// Orders is the resolver for the orders field in the Query type.
func (r *queryResolver) Orders(ctx context.Context) ([]*generated.Order, error) {
	orders, err := r.OrderService.GetAllOrders()
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrders(orders), nil
}

// Order is the resolver for the order field in the Query type.
func (r *queryResolver) Order(ctx context.Context, id string) (*generated.Order, error) {
	order, err := r.OrderService.GetOrderByID(id)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// OrdersByUser is the resolver for the ordersByUser field in the Query type.
func (r *queryResolver) OrdersByUser(ctx context.Context, userID string) ([]*generated.Order, error) {
	orders, err := r.OrderService.GetOrdersByUserID(userID)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrders(orders), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *userResolver) Orders(ctx context.Context, obj *generated.User) ([]*generated.Order, error) {
    orders, err := r.OrderService.GetOrdersByUserID(obj.ID)
    if err != nil {
        return nil, err
    }
    return ToGraphQLOrders(orders), nil
}
func (r *createOrderInputResolver) ProductIds(ctx context.Context, obj *models.CreateOrderInput, data []string) error {
	panic(fmt.Errorf("not implemented: ProductIds - productIds"))
}
func (r *Resolver) CreateOrderInput() generated.CreateOrderInputResolver {
	return &createOrderInputResolver{r}
}
type createOrderInputResolver struct{ *Resolver }
*/
