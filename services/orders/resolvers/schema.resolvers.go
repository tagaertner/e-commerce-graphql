package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/tagaertner/e-commerce-graphql/services/orders/generated"
	"github.com/tagaertner/e-commerce-graphql/services/orders/models"
)

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input models.CreateOrderInput) (*generated.Order, error) {
	createdAt := time.Time(input.CreatedAt)
	order, err := r.OrderService.CreateOrder(
		ctx,
		input.UserID,
		input.ProductIDs,
		input.Quantity,
		input.TotalPrice,
		input.Status,
		createdAt,
	)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// UpdateOrder is the resolver for the updateOrder field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, input models.UpdateOrderInput) (*generated.Order, error) {
	order, err := r.OrderService.UpdateOrder(ctx, &input)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// DeleteOrder is the resolver for the deleteOrder field.
func (r *mutationResolver) DeleteOrder(ctx context.Context, input models.DeleteOrderInput) (bool, error) {
	return r.OrderService.DeleteOrder(ctx, input)
}

// SetOrderStatus is the resolver for the setOrderStatus field.
func (r *mutationResolver) SetOrderStatus(ctx context.Context, input models.SetOrderStatusInput) (*generated.Order, error) {
	order, err := r.OrderService.SetOrderStatus(ctx, input)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// ChangeOrderQuantity is the resolver for the changeOrderQuantity field.
func (r *mutationResolver) ChangeOrderQuantity(ctx context.Context, input models.ChangeOrderQuantityInput) (*generated.Order, error) {
	panic(fmt.Errorf("not implemented: ChangeOrderQuantity - changeOrderQuantity"))
}

// Orders is the resolver for the orders field in the Query type.
func (r *queryResolver) Orders(ctx context.Context) ([]*generated.Order, error) {
	orders, err := r.OrderService.GetAllOrders()
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrders(orders), nil
}

// Order is the resolver for the order field in the Query type.
func (r *queryResolver) Order(ctx context.Context, id string) (*generated.Order, error) {
	order, err := r.OrderService.GetOrderByID(id)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrder(order), nil
}

// OrdersByUser is the resolver for the ordersByUser field in the Query type.
func (r *queryResolver) OrdersByUser(ctx context.Context, userID string) ([]*generated.Order, error) {
	orders, err := r.OrderService.GetOrdersByUserID(userID)
	if err != nil {
		return nil, err
	}
	return ToGraphQLOrders(orders), nil
}

// Orders is the resolver for the orders field.
func (r *userResolver) Orders(ctx context.Context, obj *models.User) ([]*generated.Order, error) {
	fmt.Printf("üö®üö®üö® USERRESOLVER CALLED FOR USER ID: %s üö®üö®üö®\n", obj.ID)

	// Get real orders from the database
	orders, err := r.OrderService.GetOrdersByUserID(obj.ID)
	if err != nil {
		fmt.Printf("‚ùå Error getting orders for user %s: %v\n", obj.ID, err)
		return []*generated.Order{}, nil
	}
	if orders == nil {
		orders = []*models.Order{}
	}

	fmt.Printf("‚úÖ Found %d orders for user %s\n", len(orders), obj.ID)
	return ToGraphQLOrders(orders), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
