package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"github.com/tagaertner/e-commerce-graphql/services/orders/generated"
	"github.com/tagaertner/e-commerce-graphql/services/orders/models"
)

// User is the resolver for the user field.
func (r *orderResolver) User(ctx context.Context, obj *models.Order) (*models.User, error) {
	return &models.User{ID: obj.UserID}, nil
}

// Product is the resolver for the product field.
func (r *orderResolver) Product(ctx context.Context, obj *models.Order) (*models.Product, error) {
	return &models.Product{ID: obj.ProductID}, nil
}

// Orders is the resolver for the orders field in the Query type.
func (r *queryResolver) Orders(ctx context.Context) ([]*models.Order, error) {
	return r.OrderService.GetAllOrders()
}

// Order is the resolver for the order field in the Query type.
func (r *queryResolver) Order(ctx context.Context, id string) (*models.Order, error) {
	return r.OrderService.GetOrderByID(id)
}

// OrdersByUser is the resolver for the ordersByUser field in the Query type.
func (r *queryResolver) OrdersByUser(ctx context.Context, userID string) ([]*models.Order, error) {
	return r.OrderService.GetOrdersByUserID(userID)
}

// Orders is the resolver for the orders field in the extended User type (federated).
func (r *userResolver) Orders(ctx context.Context, obj *models.User) ([]*models.Order, error) {
	return r.OrderService.GetOrdersByUserID(obj.ID)
}

// Order returns generated.OrderResolver implementation.
func (r *Resolver) Order() generated.OrderResolver { return &orderResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type orderResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
