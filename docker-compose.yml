version: "3.9"

services:
  # 🗃️ PostgreSQL Database
  db:
    image: postgres:16
    ports:
      - "${DB_PORT}:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 30s

  # 🛍️ Products Service (Go)
  products:
    build:
      context: .
      dockerfile: services/products/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_PRODUCTS}:4001"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/graphql"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # 📦 Orders Service (Go)
  orders:
    build:
      context: .
      dockerfile: services/orders/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_ORDERS}:4003"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/graphql"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # 🧍 Users Service (Go)
  users:
    build:
      context: .
      dockerfile: services/users/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_USERS}:4002"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/graphql"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # Seed runs after services create tables
  db-seed:
    image: postgres:16
    depends_on:
      db:
        condition: service_healthy
      users:
        condition: service_started
      products:
        condition: service_started
      orders:
        condition: service_started
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - ./database/init/01-seed-data.sql:/seed-data.sql
    command: >
      bash -c "
        echo 'Waiting for services to create tables...' &&
        sleep 15 &&
        echo 'Running seed data...' &&
        psql -h db -U ${POSTGRES_USER} -d ${POSTGRES_DB} -f /seed-data.sql &&
        echo 'Seed data completed successfully!'
      "
    restart: "no"

  # 🚪 Apollo Gateway (Node.js)
  gateway:
    build:
      context: .
      dockerfile: gateway/dockerfile
    env_file:
      - .env
    ports:
      - "${PORT_GATEWAY}:4000"
    depends_on:
      orders:
        condition: service_started
      users:
        condition: service_started
      products:
        condition: service_started
      db-seed:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  pgdata:
